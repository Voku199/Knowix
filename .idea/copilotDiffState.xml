<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/anglictina/app/news.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/anglictina/app/news.py" />
              <option name="originalContent" value="from flask import Blueprint, render_template, request, jsonify, session&#10;from datetime import datetime&#10;from db import get_db_connection&#10;from xp import get_user_xp_and_level&#10;&#10;news_bp = Blueprint('news', __name__, template_folder='templates')&#10;&#10;LEVEL_NAMES = [&#10;    &quot;Začátečník&quot;, &quot;Učeň&quot;, &quot;Student&quot;, &quot;Pokročilý&quot;, &quot;Expert&quot;, &quot;Mistr&quot;, &quot;Legenda&quot;&#10;]&#10;&#10;&#10;def get_level_name(level):&#10;    if level &lt;= 1:&#10;        return LEVEL_NAMES[0]&#10;    elif level &lt;= 2:&#10;        return LEVEL_NAMES[1]&#10;    elif level &lt;= 4:&#10;        return LEVEL_NAMES[2]&#10;    elif level &lt;= 6:&#10;        return LEVEL_NAMES[3]&#10;    elif level &lt;= 8:&#10;        return LEVEL_NAMES[4]&#10;    elif level &lt;= 10:&#10;        return LEVEL_NAMES[5]&#10;    else:&#10;        return LEVEL_NAMES[6]&#10;&#10;&#10;@news_bp.context_processor&#10;def inject_xp_info():&#10;    user_id = session.get('user_id')&#10;    if user_id:&#10;        user_data = get_user_xp_and_level(user_id)&#10;        xp = user_data.get(&quot;xp&quot;, 0)&#10;        level = user_data.get(&quot;level&quot;, 1)&#10;        xp_in_level = xp % 50&#10;        percent = int((xp_in_level / 50) * 100)&#10;        level_name = get_level_name(level)&#10;        return dict(&#10;            user_xp=xp,&#10;            user_level=level,&#10;            user_level_name=level_name,&#10;            user_progress_percent=percent,&#10;            user_xp_in_level=xp_in_level&#10;        )&#10;    return {}&#10;&#10;&#10;@news_bp.errorhandler(502)&#10;@news_bp.errorhandler(503)&#10;@news_bp.errorhandler(504)&#10;@news_bp.errorhandler(500)&#10;@news_bp.errorhandler(404)&#10;@news_bp.errorhandler(Exception)&#10;def server_error(e):&#10;    # vrátí stránku error.html s informací o výpadku&#10;    return render_template('error.html', error_code=e.code), e.code&#10;&#10;&#10;# Třídy modelů&#10;class User:&#10;    @staticmethod&#10;    def get_by_id(user_id):&#10;        &quot;&quot;&quot;Získání uživatele podle ID&quot;&quot;&quot;&#10;        try:&#10;            conn = get_db_connection()&#10;            cursor = conn.cursor(dictionary=True)&#10;            cursor.execute(&quot;&quot;&quot;&#10;                SELECT first_name, last_name, email &#10;                FROM users &#10;                WHERE id = %s&#10;            &quot;&quot;&quot;, (user_id,))&#10;            user = cursor.fetchone()&#10;            cursor.close()&#10;            conn.close()&#10;            return user&#10;        except Exception as e:&#10;            print(&quot;Chyba při získávání uživatele:&quot;, str(e))&#10;            return None&#10;&#10;&#10;class News:&#10;    @staticmethod&#10;    def get_all():&#10;        &quot;&quot;&quot;Získání všech novinek&quot;&quot;&quot;&#10;        try:&#10;            conn = get_db_connection()&#10;            cursor = conn.cursor(dictionary=True)&#10;            cursor.execute(&quot;&quot;&quot;&#10;                SELECT n.*, u.first_name, u.last_name &#10;                FROM news n&#10;                JOIN users u ON n.author_id = u.id&#10;                ORDER BY n.created_at DESC&#10;            &quot;&quot;&quot;)&#10;            news = cursor.fetchall()&#10;            cursor.close()&#10;            conn.close()&#10;            return news&#10;        except Exception as e:&#10;            print(&quot;Chyba při získávání novinek:&quot;, str(e))&#10;            return []&#10;&#10;    @staticmethod&#10;    def create(title, content, author_id):&#10;        &quot;&quot;&quot;Vytvoření nové novinky&quot;&quot;&quot;&#10;        try:&#10;            conn = get_db_connection()&#10;            cursor = conn.cursor()&#10;            cursor.execute(&quot;&quot;&quot;&#10;                INSERT INTO news (title, content, author_id, created_at)&#10;                VALUES (%s, %s, %s, %s)&#10;            &quot;&quot;&quot;, (title, content, author_id, datetime.now()))&#10;            conn.commit()&#10;            cursor.close()&#10;            conn.close()&#10;            return True&#10;        except Exception as e:&#10;            print(&quot;Chyba při vytváření novinky:&quot;, str(e))&#10;            return False&#10;&#10;&#10;# Helper funkce&#10;def validate_owner(user_id):&#10;    &quot;&quot;&quot;Ověření identity majitele&quot;&quot;&quot;&#10;    user = User.get_by_id(user_id)&#10;    if user:&#10;        return (&#10;                user['first_name'] == &quot;Vojtěch&quot; and&#10;                user['last_name'] == &quot;Kurinec&quot; and&#10;                user['email'] == &quot;vojta.kurinec@gmail.com&quot;&#10;        )&#10;    return False&#10;&#10;&#10;# Routy&#10;@news_bp.route('/news')&#10;def news_page():&#10;    is_owner = False&#10;    if 'user_id' in session:&#10;        is_owner = validate_owner(session['user_id'])&#10;    return render_template('news/news.html', is_owner=is_owner)&#10;&#10;&#10;@news_bp.route('/get_news')&#10;def get_news():&#10;    try:&#10;        news_items = News.get_all()&#10;        formatted_news = [{&#10;            'id': item['id'],&#10;            'title': item['title'],&#10;            'content': item['content'],&#10;            'author': f&quot;{item['first_name']} {item['last_name']}&quot;,&#10;            'created_at': item['created_at'].strftime('%d.%m.%Y %H:%M'),&#10;            'updated_at': item['updated_at'].strftime('%d.%m.%Y %H:%M') if item['updated_at'] else None&#10;        } for item in news_items]&#10;&#10;        return jsonify({'news': formatted_news})&#10;    except Exception as e:&#10;        print(&quot;Chyba v get_news route:&quot;, str(e))&#10;        return jsonify({'error': 'Internal server error'}), 500&#10;&#10;&#10;@news_bp.route('/news', methods=['POST'])&#10;def add_news():&#10;    if 'user_id' not in session:&#10;        return jsonify({'status': 'error', 'message': 'Nejste přihlášen'}), 401&#10;&#10;    if not validate_owner(session['user_id']):&#10;        return jsonify({'status': 'error', 'message': 'Neoprávněný přístup'}), 403&#10;&#10;    data = request.get_json()&#10;    if News.create(&#10;            title=data.get('title'),&#10;            content=data.get('content'),&#10;            author_id=session['user_id']&#10;    ):&#10;        return jsonify({'status': 'success'})&#10;&#10;    return jsonify({'status': 'error', 'message': 'Chyba při ukládání'}), 500&#10;" />
              <option name="updatedContent" value="from flask import Blueprint, render_template, request, jsonify, session&#10;from datetime import datetime&#10;from db import get_db_connection&#10;from xp import get_user_xp_and_level&#10;&#10;news_bp = Blueprint('news', __name__, template_folder='templates')&#10;&#10;LEVEL_NAMES = [&#10;    &quot;Začátečník&quot;, &quot;Učeň&quot;, &quot;Student&quot;, &quot;Pokročilý&quot;, &quot;Expert&quot;, &quot;Mistr&quot;, &quot;Legenda&quot;&#10;]&#10;&#10;&#10;def get_level_name(level):&#10;    if level &lt;= 1:&#10;        return LEVEL_NAMES[0]&#10;    elif level &lt;= 2:&#10;        return LEVEL_NAMES[1]&#10;    elif level &lt;= 4:&#10;        return LEVEL_NAMES[2]&#10;    elif level &lt;= 6:&#10;        return LEVEL_NAMES[3]&#10;    elif level &lt;= 8:&#10;        return LEVEL_NAMES[4]&#10;    elif level &lt;= 10:&#10;        return LEVEL_NAMES[5]&#10;    else:&#10;        return LEVEL_NAMES[6]&#10;&#10;&#10;@news_bp.context_processor&#10;def inject_xp_info():&#10;    user_id = session.get('user_id')&#10;    if user_id:&#10;        user_data = get_user_xp_and_level(user_id)&#10;        xp = user_data.get(&quot;xp&quot;, 0)&#10;        level = user_data.get(&quot;level&quot;, 1)&#10;        xp_in_level = xp % 50&#10;        percent = int((xp_in_level / 50) * 100)&#10;        level_name = get_level_name(level)&#10;        return dict(&#10;            user_xp=xp,&#10;            user_level=level,&#10;            user_level_name=level_name,&#10;            user_progress_percent=percent,&#10;            user_xp_in_level=xp_in_level&#10;        )&#10;    return {}&#10;&#10;&#10;@news_bp.errorhandler(502)&#10;@news_bp.errorhandler(503)&#10;@news_bp.errorhandler(504)&#10;@news_bp.errorhandler(500)&#10;@news_bp.errorhandler(404)&#10;@news_bp.errorhandler(Exception)&#10;def server_error(e):&#10;    # vrátí stránku error.html s informací o výpadku&#10;    return render_template('error.html', error_code=e.code), e.code&#10;&#10;&#10;# Třídy modelů&#10;class User:&#10;    @staticmethod&#10;    def get_by_id(user_id):&#10;        &quot;&quot;&quot;Získání uživatele podle ID&quot;&quot;&quot;&#10;        try:&#10;            conn = get_db_connection()&#10;            cursor = conn.cursor(dictionary=True)&#10;            cursor.execute(&quot;&quot;&quot;&#10;                SELECT first_name, last_name, email &#10;                FROM users &#10;                WHERE id = %s&#10;            &quot;&quot;&quot;, (user_id,))&#10;            user = cursor.fetchone()&#10;            cursor.close()&#10;            conn.close()&#10;            return user&#10;        except Exception as e:&#10;            print(&quot;Chyba při získávání uživatele:&quot;, str(e))&#10;            return None&#10;&#10;&#10;class News:&#10;    @staticmethod&#10;    def get_all():&#10;        &quot;&quot;&quot;Získání všech novinek&quot;&quot;&quot;&#10;        try:&#10;            conn = get_db_connection()&#10;            cursor = conn.cursor(dictionary=True)&#10;            cursor.execute(&quot;&quot;&quot;&#10;                SELECT n.*, u.first_name, u.last_name &#10;                FROM news n&#10;                JOIN users u ON n.author_id = u.id&#10;                ORDER BY n.created_at DESC&#10;            &quot;&quot;&quot;)&#10;            news = cursor.fetchall()&#10;            cursor.close()&#10;            conn.close()&#10;            return news&#10;        except Exception as e:&#10;            print(&quot;Chyba při získávání novinek:&quot;, str(e))&#10;            return []&#10;&#10;    @staticmethod&#10;    def create(title, content, author_id):&#10;        &quot;&quot;&quot;Vytvoření nové novinky&quot;&quot;&quot;&#10;        try:&#10;            conn = get_db_connection()&#10;            cursor = conn.cursor()&#10;            cursor.execute(&quot;&quot;&quot;&#10;                INSERT INTO news (title, content, author_id, created_at)&#10;                VALUES (%s, %s, %s, %s)&#10;            &quot;&quot;&quot;, (title, content, author_id, datetime.now()))&#10;            conn.commit()&#10;            cursor.close()&#10;            conn.close()&#10;            return True&#10;        except Exception as e:&#10;            print(&quot;Chyba při vytváření novinky:&quot;, str(e))&#10;            return False&#10;&#10;&#10;# Helper funkce&#10;def validate_owner(user_id):&#10;    &quot;&quot;&quot;Ověření identity majitele podle user_id&quot;&quot;&quot;&#10;    # Zde nastavte správné user_id majitele&#10;    OWNER_USER_ID = 49  # Změňte na správné ID majitele&#10;    return user_id == OWNER_USER_ID&#10;&#10;&#10;# Routy&#10;@news_bp.route('/news')&#10;def news_page():&#10;    is_owner = False&#10;    if 'user_id' in session:&#10;        is_owner = validate_owner(session['user_id'])&#10;    return render_template('news/news.html', is_owner=is_owner)&#10;&#10;&#10;@news_bp.route('/get_news')&#10;def get_news():&#10;    try:&#10;        news_items = News.get_all()&#10;        formatted_news = [{&#10;            'id': item['id'],&#10;            'title': item['title'],&#10;            'content': item['content'],&#10;            'author': f&quot;{item['first_name']} {item['last_name']}&quot;,&#10;            'created_at': item['created_at'].strftime('%d.%m.%Y %H:%M'),&#10;            'updated_at': item['updated_at'].strftime('%d.%m.%Y %H:%M') if item['updated_at'] else None&#10;        } for item in news_items]&#10;&#10;        return jsonify({'news': formatted_news})&#10;    except Exception as e:&#10;        print(&quot;Chyba v get_news route:&quot;, str(e))&#10;        return jsonify({'error': 'Internal server error'}), 500&#10;&#10;&#10;@news_bp.route('/add_news', methods=['POST'])&#10;def add_news():&#10;    &quot;&quot;&quot;Route pro přidávání novinek - pouze pro majitele&quot;&quot;&quot;&#10;    if 'user_id' not in session:&#10;        return jsonify({'status': 'error', 'message': 'Nejste přihlášen'}), 401&#10;&#10;    if not validate_owner(session['user_id']):&#10;        return jsonify({'status': 'error', 'message': 'Neoprávněný přístup - pouze majitel může přidávat novinky'}), 403&#10;&#10;    try:&#10;        data = request.get_json()&#10;        title = data.get('title', '').strip()&#10;        content = data.get('content', '').strip()&#10;        &#10;        if not title or not content:&#10;            return jsonify({'status': 'error', 'message': 'Název i obsah musí být vyplněny'}), 400&#10;        &#10;        if News.create(title=title, content=content, author_id=session['user_id']):&#10;            return jsonify({'status': 'success', 'message': 'Novinka byla úspěšně přidána'})&#10;        else:&#10;            return jsonify({'status': 'error', 'message': 'Chyba při ukládání do databáze'}), 500&#10;            &#10;    except Exception as e:&#10;        print(&quot;Chyba v add_news route:&quot;, str(e))&#10;        return jsonify({'status': 'error', 'message': 'Nastala chyba při zpracování požadavku'}), 500" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/anglictina/app/templates/student_stats_chart.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/anglictina/app/templates/student_stats_chart.html" />
              <option name="updatedContent" value="{% extends 'base.html' %}&#10;{% block content %}&#10;&lt;div class=&quot;container&quot;&gt;&#10;    &lt;h2&gt;Statistiky studenta: {{ student.first_name }} {{ student.last_name }}&lt;/h2&gt;&#10;    &lt;div class=&quot;profile&quot;&gt;&#10;        &lt;img src=&quot;{{ url_for('static', filename='profile_pics/' + (student.profile_pic or 'default.jpg')) }}&quot; width=&quot;80&quot; height=&quot;80&quot; style=&quot;border-radius:50%&quot;&gt;&#10;        &lt;p&gt;Email: {{ student.email }}&lt;/p&gt;&#10;        &lt;p&gt;Úroveň: {{ student.english_level }}&lt;/p&gt;&#10;        &lt;p&gt;XP: {{ student.xp }}&lt;/p&gt;&#10;        &lt;p&gt;Level: {{ student.level }}&lt;/p&gt;&#10;        &lt;p&gt;Streak: {{ student.streak }}&lt;/p&gt;&#10;    &lt;/div&gt;&#10;    &lt;hr&gt;&#10;    &lt;h3&gt;Přehled statistik&lt;/h3&gt;&#10;    &lt;canvas id=&quot;statsChart&quot; width=&quot;400&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt;&#10;&lt;/div&gt;&#10;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/chart.js&quot;&gt;&lt;/script&gt;&#10;&lt;script&gt;&#10;    // Připrav data z user_stats&#10;    const stats = {{ stats|tojson }};&#10;    // Předpokládáme, že user_stats má sloupce: id, user_id, stat_name, stat_value&#10;    const labels = stats.map(s =&gt; s.stat_name);&#10;    const values = stats.map(s =&gt; s.stat_value);&#10;    const ctx = document.getElementById('statsChart').getContext('2d');&#10;    new Chart(ctx, {&#10;        type: 'bar',&#10;        data: {&#10;            labels: labels,&#10;            datasets: [{&#10;                label: 'Hodnota',&#10;                data: values,&#10;                backgroundColor: 'rgba(54, 162, 235, 0.5)',&#10;                borderColor: 'rgba(54, 162, 235, 1)',&#10;                borderWidth: 1&#10;            }]&#10;        },&#10;        options: {&#10;            responsive: true,&#10;            scales: {&#10;                y: {&#10;                    beginAtZero: true&#10;                }&#10;            }&#10;        }&#10;    });&#10;&lt;/script&gt;&#10;{% endblock %}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>