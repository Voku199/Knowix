<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/anglictina/app/main.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/anglictina/app/main.py" />
              <option name="originalContent" value="# --- Flask and SocketIO imports ---&#10;from dotenv import load_dotenv&#10;from flask import Flask, render_template, session, send_from_directory, request, redirect, jsonify&#10;from flask_session import Session&#10;from streak import get_user_streak, update_user_streak&#10;import traceback&#10;import redis&#10;from werkzeug.middleware.proxy_fix import ProxyFix&#10;&#10;import os&#10;import sys&#10;&#10;# Import všech blueprintů&#10;from A1_music import exercises_bp&#10;from ai import ai_bp&#10;from at_on import at_on_bp&#10;from auth import auth_bp&#10;from chat import zpravy_bp&#10;from feedback import feedback_bp&#10;from hangman import hangman_bp&#10;from listening import listening_bp&#10;from main_routes import main_bp&#10;from nepravidelna_slovesa import verbs_bp&#10;from news import news_bp&#10;from obchod import obchod_bp&#10;from present_perfect import chat_bp&#10;from review import review_bp&#10;from roleplaying import roleplaying_bp&#10;from theme import theme_bp&#10;from pexeso import pexeso_bp, register_socketio_handlers&#10;from xp import get_user_xp_and_level&#10;from xp import xp_bp&#10;from drawing import drawing_bp&#10;from psani import psani_bp&#10;from stats import user_stats_bp&#10;from admin import admin_bp&#10;from vlastni_music import vlastni_music_bp&#10;from proc import proc_bp&#10;&#10;app = Flask(__name__)&#10;&#10;# NEJDŘÍVE načti proměnné prostředí a nastav SECRET_KEY&#10;load_dotenv(dotenv_path=&quot;.env&quot;)&#10;app.secret_key = os.getenv(&quot;SECRET_KEY&quot;)&#10;if not app.secret_key:&#10;    print(&quot;[main] ERROR: SECRET_KEY is not set in environment! Session will not persist correctly.&quot;)&#10;    raise RuntimeError(&quot;SECRET_KEY is missing. Set SECRET_KEY in environment for stable sessions.&quot;)&#10;&#10;# Session/cookie konfigurace (bezpečná a stabilní)&#10;app.config['SESSION_TYPE'] = 'redis'&#10;if os.getenv('REDIS_URL'):&#10;    app.config['SESSION_REDIS'] = redis.from_url(os.getenv('REDIS_URL'))&#10;&#10;# Cookie základní nastavení – upraví se v before_request podle hostu&#10;app.config['SESSION_COOKIE_NAME'] = os.getenv('SESSION_COOKIE_NAME', 'knowix_session')&#10;app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'&#10;app.config['SESSION_COOKIE_SECURE'] = True&#10;app.config['SESSION_COOKIE_HTTPONLY'] = True&#10;app.config['SESSION_USE_SIGNER'] = True&#10;app.config['PERMANENT_SESSION_LIFETIME'] = 60 * 60 * 24 * 30  # 30 dní&#10;app.config['SESSION_REFRESH_EACH_REQUEST'] = True  # DŮLEŽITÉ: vynuť refresh cookies&#10;&#10;# Respektuj proxy hlavičky (https, host, port) – důležité pro secure cookies&#10;app.wsgi_app = ProxyFix(app.wsgi_app, x_for=1, x_proto=1, x_host=1, x_port=1)&#10;&#10;# Fallback: pokud Redis není dostupný, přepnout na filesystem sessions&#10;use_redis = False&#10;force_fs = os.getenv('SESSION_FORCE_FILESYSTEM', '').strip() == '1'&#10;redis_url = os.getenv('REDIS_URL')&#10;if not force_fs and redis_url and app.config.get('SESSION_REDIS') is not None:&#10;    try:&#10;        app.config['SESSION_REDIS'].ping()&#10;        use_redis = True&#10;        print(f&quot;[main] Session backend: Redis OK -&gt; {redis_url}&quot;)&#10;    except Exception as ex:&#10;        print(f&quot;[main] WARNING: Redis ping failed ({ex}). Falling back to filesystem sessions.&quot;)&#10;&#10;if not use_redis:&#10;    app.config['SESSION_TYPE'] = 'filesystem'&#10;    if 'SESSION_REDIS' in app.config:&#10;        app.config.pop('SESSION_REDIS', None)&#10;    print(&quot;[main] Session backend: filesystem&quot;)&#10;&#10;# TEPRVE NYNÍ inicializuj Flask-Session (s už nastaveným SECRET_KEY)&#10;Session(app)&#10;&#10;# Konfigurace&#10;app.config['UPLOAD_FOLDER'] = 'static/profile_pics'&#10;app.config['ALLOWED_EXTENSIONS'] = {'png', 'jpg', 'jpeg', 'gif'}&#10;app.config['GENIUS_ACCESS_TOKEN'] = os.getenv('GENIUS_ACCESS_TOKEN')&#10;app.config['DEEPL_API_KEY'] = os.getenv('DEEPL_API_KEY')&#10;app.config['MAX_CONTENT_LENGTH'] = 2 * 1024 * 1024  # Max 2 MB upload (profilovky atd.)&#10;&#10;# Registrace blueprintů&#10;app.register_blueprint(main_bp)&#10;app.register_blueprint(auth_bp)&#10;app.register_blueprint(verbs_bp)&#10;app.register_blueprint(exercises_bp)&#10;app.register_blueprint(feedback_bp)&#10;app.register_blueprint(theme_bp)&#10;app.register_blueprint(hangman_bp)&#10;app.register_blueprint(news_bp)&#10;app.register_blueprint(chat_bp)&#10;app.register_blueprint(at_on_bp)&#10;app.register_blueprint(xp_bp)&#10;app.register_blueprint(listening_bp)&#10;app.register_blueprint(review_bp)&#10;app.register_blueprint(obchod_bp)&#10;app.register_blueprint(zpravy_bp)&#10;app.register_blueprint(roleplaying_bp)&#10;app.register_blueprint(ai_bp)&#10;app.register_blueprint(pexeso_bp)&#10;app.register_blueprint(drawing_bp)&#10;app.register_blueprint(psani_bp)&#10;app.register_blueprint(user_stats_bp)&#10;app.register_blueprint(admin_bp)&#10;app.register_blueprint(vlastni_music_bp)&#10;app.register_blueprint(proc_bp)&#10;&#10;&#10;@app.route('/sitemap.xml')&#10;def sitemap():&#10;    return send_from_directory('templates', 'sitemap.xml')&#10;&#10;&#10;@app.route('/robots.txt')&#10;def robots_txt():&#10;    return send_from_directory('templates', 'robots.txt')&#10;&#10;&#10;@app.before_request&#10;def redirect_to_main_domain():&#10;    host = request.host.split(':')[0]&#10;&#10;    # Debug vstupních requestů kolem loginu/registrace/indexu&#10;    if request.path in ('/login', '/register', '/'):&#10;        try:&#10;            cookie_name = app.config.get('SESSION_COOKIE_NAME', 'session')&#10;            sid = request.cookies.get(cookie_name)&#10;            print(&#10;                f&quot;[before_request] host={host} path={request.path} method={request.method} session_keys={list(session.keys())} sid={sid}&quot;)&#10;        except Exception:&#10;            pass&#10;&#10;    # Nastav cookie doménu a secure podle hostu&#10;    if host.endswith('knowix.cz'):&#10;        app.config['SESSION_COOKIE_DOMAIN'] = '.knowix.cz'&#10;        app.config['SESSION_COOKIE_SECURE'] = True&#10;        app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'&#10;    elif host in ('localhost', '127.0.0.1'):&#10;        # Lokální vývoj: nepoužívej Secure, žádná doména&#10;        app.config['SESSION_COOKIE_DOMAIN'] = None&#10;        app.config['SESSION_COOKIE_SECURE'] = False&#10;        app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'&#10;&#10;    # Preferovaný host – přesměrování na www&#10;    redirect_hosts = (&quot;knowix.cz&quot;, &quot;knowix.up.railway.app&quot;)&#10;    if host in redirect_hosts:&#10;        target = &quot;https://www.knowix.cz&quot; + request.full_path&#10;        code = 308 if request.method not in (&quot;GET&quot;, &quot;HEAD&quot;, &quot;OPTIONS&quot;) else 301&#10;        return redirect(target, code=code)&#10;&#10;    # Vynucení permanentních session pro přihlášené&#10;    if 'user_id' in session:&#10;        session.permanent = True&#10;        # Force session refresh to ensure cookies are sent&#10;        session.modified = True&#10;&#10;&#10;@app.route('/static/profile_pics/&lt;path:filename&gt;')&#10;def serve_profile_pic(filename):&#10;    &quot;&quot;&quot;Slouží profile obrázky s fallbackem na default obrázek&quot;&quot;&quot;&#10;    try:&#10;        return send_from_directory('static/profile_pics', filename)&#10;    except:&#10;        # Fallback na default avatar pokud obrázek neexistuje&#10;        return send_from_directory('static/pic', 'default_avatar.png')&#10;&#10;&#10;@app.context_processor&#10;def inject_streak():&#10;    user_id = session.get('user_id')&#10;    if user_id:&#10;        streak = get_user_streak(user_id)&#10;        return dict(user_streak=streak)&#10;    return dict(user_streak=0)&#10;&#10;&#10;@app.errorhandler(502)&#10;@app.errorhandler(503)&#10;@app.errorhandler(504)&#10;@app.errorhandler(500)&#10;@app.errorhandler(404)&#10;@app.errorhandler(Exception)&#10;def server_error(e):&#10;    code = getattr(e, 'code', 500)&#10;    tb = traceback.format_exc()&#10;&#10;    # Pokud klient očekává JSON (AJAX fetch na JSON endpoint), vrať JSON místo HTML&#10;    wants_json = ('application/json' in request.headers.get('Accept', '')) or \&#10;                 ('application/json' in request.headers.get('Content-Type', '')) or \&#10;                 request.path.endswith('/check-answer')&#10;    if wants_json:&#10;        return jsonify({&#10;            'error': str(e),&#10;            'code': code,&#10;            'traceback': tb&#10;        }), code&#10;&#10;    return render_template(&#10;        'error.html',&#10;        error_code=code,&#10;        error_message=str(e),&#10;        error_traceback=tb&#10;    ), code&#10;&#10;&#10;LEVEL_NAMES = [&#10;    &quot;Začátečník&quot;, &quot;Učeň&quot;, &quot;Student&quot;, &quot;Pokročilý&quot;, &quot;Expert Knowixu&quot;, &quot;Mistr&quot;, &quot;Legenda&quot;, &quot;Volax&quot;, &quot;Král Knowixu&quot;&#10;]&#10;&#10;&#10;def get_level_name(level):&#10;    if level &lt;= 1:&#10;        return LEVEL_NAMES[0]&#10;    elif level &lt;= 2:&#10;        return LEVEL_NAMES[1]&#10;    elif level &lt;= 4:&#10;        return LEVEL_NAMES[2]&#10;    elif level &lt;= 5:&#10;        return LEVEL_NAMES[3]&#10;    elif level &lt;= 6:&#10;        return LEVEL_NAMES[4]&#10;    elif level &lt;= 8:&#10;        return LEVEL_NAMES[5]&#10;    elif level &lt;= 10:&#10;        return LEVEL_NAMES[6]&#10;    elif level &lt;= 12:&#10;        return LEVEL_NAMES[7]&#10;    elif level &lt;= 15:&#10;        return LEVEL_NAMES[8]&#10;    else:&#10;        return LEVEL_NAMES[-1]&#10;&#10;&#10;@app.context_processor&#10;def inject_xp_info():&#10;    user_id = session.get('user_id')&#10;    if user_id:&#10;        user_data = get_user_xp_and_level(user_id)&#10;        xp = user_data.get(&quot;xp&quot;, 0)&#10;        level = user_data.get(&quot;level&quot;, 1)&#10;        xp_in_level = xp % 50&#10;        percent = int((xp_in_level / 50) * 100)&#10;        level_name = get_level_name(level)&#10;        return dict(&#10;            user_xp=xp,&#10;            user_level=level,&#10;            user_level_name=level_name,&#10;            user_progress_percent=percent,&#10;            user_xp_in_level=xp_in_level&#10;        )&#10;    return {}&#10;&#10;&#10;@app.after_request&#10;def add_security_headers(response):&#10;    # Debug odchozí odpovědi pro login/registraci/index&#10;    if request.path in ('/login', '/register', '/'):&#10;        try:&#10;            cookie_name = app.config.get('SESSION_COOKIE_NAME', 'session')&#10;            has_set_cookie = any(h.lower() == 'set-cookie' for h in response.headers.keys())&#10;            set_cookie_header = response.headers.get('Set-Cookie')&#10;            sid_req = request.cookies.get(cookie_name)&#10;            print(&#10;                f&quot;[after_request] host={request.host} path={request.path} status={response.status_code} set_cookie={has_set_cookie} sid_req={sid_req} cookie_domain={app.config.get('SESSION_COOKIE_DOMAIN')} samesite={app.config.get('SESSION_COOKIE_SAMESITE')} secure={app.config.get('SESSION_COOKIE_SECURE')} set_cookie_header={set_cookie_header[:160] if set_cookie_header else None}&quot;)&#10;        except Exception:&#10;            pass&#10;&#10;    # Vylepšená CSP politika s podporou pro Google Analytics a další služby&#10;    response.headers['Content-Security-Policy'] = (&#10;        &quot;default-src 'self'; &quot;&#10;        &quot;base-uri 'self'; &quot;&#10;        &quot;script-src 'self' 'unsafe-inline' 'unsafe-eval' &quot;&#10;        &quot;https://cdn.quilljs.com https://cdn.jsdelivr.net &quot;&#10;        &quot;https://www.youtube.com https://s.ytimg.com &quot;&#10;        &quot;https://www.googletagmanager.com https://www.google-analytics.com &quot;&#10;        &quot;https://ssl.google-analytics.com; &quot;&#10;        &quot;style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://cdn.quilljs.com; &quot;&#10;        &quot;font-src 'self' https://fonts.gstatic.com; &quot;&#10;        &quot;img-src 'self' data: https: blob: https://www.google-analytics.com https://ssl.google-analytics.com https://www.googletagmanager.com https://stats.g.doubleclick.net; &quot;&#10;        &quot;connect-src 'self' https://www.google-analytics.com https://region1.google-analytics.com https://region1.analytics.google.com https://analytics.google.com https://stats.g.doubleclick.net https://www.googletagmanager.com; &quot;&#10;        &quot;frame-src https://open.spotify.com https://*.spotify.com https://www.youtube-nocookie.com https://www.youtube.com https://*.youtube.com; &quot;&#10;        &quot;object-src 'none'; frame-ancestors 'none'; upgrade-insecure-requests;&quot;&#10;    )&#10;    # Přidána Permissions-Policy&#10;    response.headers['Permissions-Policy'] = (&#10;        &quot;geolocation=(), microphone=(), camera=(), fullscreen=(self), magnetometer=(), gyroscope=(), usb=(), payment=()&quot;&#10;    )&#10;&#10;    # Ensure cookies are properly set for authenticated users&#10;    if 'user_id' in session and request.path in ('/login', '/register'):&#10;        response.set_cookie(&#10;            app.config.get('SESSION_COOKIE_NAME', 'knowix_session'),&#10;            value=session.get('_id', ''),&#10;            domain=app.config.get('SESSION_COOKIE_DOMAIN'),&#10;            secure=app.config.get('SESSION_COOKIE_SECURE', True),&#10;            httponly=app.config.get('SESSION_COOKIE_HTTPONLY', True),&#10;            samesite=app.config.get('SESSION_COOKIE_SAMESITE', 'Lax'),&#10;            max_age=app.config.get('PERMANENT_SESSION_LIFETIME', 60 * 60 * 24 * 30)&#10;        )&#10;&#10;    response.headers['Strict-Transport-Security'] = 'max-age=63072000; includeSubDomains; preload'&#10;    response.headers['X-Frame-Options'] = 'DENY'&#10;    response.headers['Cross-Origin-Opener-Policy'] = 'same-origin'&#10;    response.headers['Cross-Origin-Resource-Policy'] = 'same-origin'&#10;    response.headers['X-Content-Type-Options'] = 'nosniff'&#10;    response.headers['Referrer-Policy'] = 'no-referrer-when-downgrade'&#10;    return response&#10;&#10;&#10;# app.run(debug=True, port=5000 debug=True)&#10;#     from waitress import serve&#10;#&#10;#     serve(app, host=&quot;0.0.0.0&quot;, port=8080)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    from waitress import serve&#10;&#10;    serve(app, host=&quot;0.0.0.0&quot;, port=8080)&#10;" />
              <option name="updatedContent" value="# --- Flask and SocketIO imports ---&#10;from dotenv import load_dotenv&#10;from flask import Flask, render_template, session, send_from_directory, request, redirect, jsonify&#10;from flask_session import Session&#10;from streak import get_user_streak, update_user_streak&#10;import traceback&#10;import redis&#10;from werkzeug.middleware.proxy_fix import ProxyFix&#10;&#10;import os&#10;import sys&#10;&#10;# Import všech blueprintů&#10;from A1_music import exercises_bp&#10;from ai import ai_bp&#10;from at_on import at_on_bp&#10;from auth import auth_bp&#10;from chat import zpravy_bp&#10;from feedback import feedback_bp&#10;from hangman import hangman_bp&#10;from listening import listening_bp&#10;from main_routes import main_bp&#10;from nepravidelna_slovesa import verbs_bp&#10;from news import news_bp&#10;from obchod import obchod_bp&#10;from present_perfect import chat_bp&#10;from review import review_bp&#10;from roleplaying import roleplaying_bp&#10;from theme import theme_bp&#10;from pexeso import pexeso_bp, register_socketio_handlers&#10;from xp import get_user_xp_and_level&#10;from xp import xp_bp&#10;from drawing import drawing_bp&#10;from psani import psani_bp&#10;from stats import user_stats_bp&#10;from admin import admin_bp&#10;from vlastni_music import vlastni_music_bp&#10;from proc import proc_bp&#10;from security_ext import init_security&#10;&#10;app = Flask(__name__)&#10;&#10;# NEJDŘÍVE načti proměnné prostředí a nastav SECRET_KEY&#10;load_dotenv(dotenv_path=&quot;.env&quot;)&#10;app.secret_key = os.getenv(&quot;SECRET_KEY&quot;)&#10;if not app.secret_key:&#10;    print(&quot;[main] ERROR: SECRET_KEY is not set in environment! Session will not persist correctly.&quot;)&#10;    raise RuntimeError(&quot;SECRET_KEY is missing. Set SECRET_KEY in environment for stable sessions.&quot;)&#10;&#10;# Session/cookie konfigurace (bezpečná a stabilní)&#10;app.config['SESSION_TYPE'] = 'redis'&#10;if os.getenv('REDIS_URL'):&#10;    app.config['SESSION_REDIS'] = redis.from_url(os.getenv('REDIS_URL'))&#10;&#10;# Cookie základní nastavení – upraví se v before_request podle hostu&#10;app.config['SESSION_COOKIE_NAME'] = os.getenv('SESSION_COOKIE_NAME', 'knowix_session')&#10;app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'&#10;app.config['SESSION_COOKIE_SECURE'] = True&#10;app.config['SESSION_COOKIE_HTTPONLY'] = True&#10;app.config['SESSION_USE_SIGNER'] = True&#10;app.config['PERMANENT_SESSION_LIFETIME'] = 60 * 60 * 24 * 30  # 30 dní&#10;app.config['SESSION_REFRESH_EACH_REQUEST'] = True  # DŮLEŽITÉ: vynuť refresh cookies&#10;&#10;# Respektuj proxy hlavičky (https, host, port) – důležité pro secure cookies&#10;app.wsgi_app = ProxyFix(app.wsgi_app, x_for=1, x_proto=1, x_host=1, x_port=1)&#10;&#10;# Fallback: pokud Redis není dostupný, přepnout na filesystem sessions&#10;use_redis = False&#10;force_fs = os.getenv('SESSION_FORCE_FILESYSTEM', '').strip() == '1'&#10;redis_url = os.getenv('REDIS_URL')&#10;if not force_fs and redis_url and app.config.get('SESSION_REDIS') is not None:&#10;    try:&#10;        app.config['SESSION_REDIS'].ping()&#10;        use_redis = True&#10;        print(f&quot;[main] Session backend: Redis OK -&gt; {redis_url}&quot;)&#10;    except Exception as ex:&#10;        print(f&quot;[main] WARNING: Redis ping failed ({ex}). Falling back to filesystem sessions.&quot;)&#10;&#10;if not use_redis:&#10;    app.config['SESSION_TYPE'] = 'filesystem'&#10;    if 'SESSION_REDIS' in app.config:&#10;        app.config.pop('SESSION_REDIS', None)&#10;    print(&quot;[main] Session backend: filesystem&quot;)&#10;&#10;# TEPRVE NYNÍ inicializuj Flask-Session (s už nastaveným SECRET_KEY)&#10;Session(app)&#10;&#10;# Konfigurace&#10;app.config['UPLOAD_FOLDER'] = 'static/profile_pics'&#10;app.config['ALLOWED_EXTENSIONS'] = {'png', 'jpg', 'jpeg', 'gif'}&#10;app.config['GENIUS_ACCESS_TOKEN'] = os.getenv('GENIUS_ACCESS_TOKEN')&#10;app.config['DEEPL_API_KEY'] = os.getenv('DEEPL_API_KEY')&#10;app.config['MAX_CONTENT_LENGTH'] = 2 * 1024 * 1024  # Max 2 MB upload (profilovky atd.)&#10;&#10;# Registrace blueprintů&#10;app.register_blueprint(main_bp)&#10;app.register_blueprint(auth_bp)&#10;app.register_blueprint(verbs_bp)&#10;app.register_blueprint(exercises_bp)&#10;app.register_blueprint(feedback_bp)&#10;app.register_blueprint(theme_bp)&#10;app.register_blueprint(hangman_bp)&#10;app.register_blueprint(news_bp)&#10;app.register_blueprint(chat_bp)&#10;app.register_blueprint(at_on_bp)&#10;app.register_blueprint(xp_bp)&#10;app.register_blueprint(listening_bp)&#10;app.register_blueprint(review_bp)&#10;app.register_blueprint(obchod_bp)&#10;app.register_blueprint(zpravy_bp)&#10;app.register_blueprint(roleplaying_bp)&#10;app.register_blueprint(ai_bp)&#10;app.register_blueprint(pexeso_bp)&#10;app.register_blueprint(drawing_bp)&#10;app.register_blueprint(psani_bp)&#10;app.register_blueprint(user_stats_bp)&#10;app.register_blueprint(admin_bp)&#10;app.register_blueprint(vlastni_music_bp)&#10;app.register_blueprint(proc_bp)&#10;&#10;# Inicializace bezpečnostních rozšíření (CSRF + rate limiting)&#10;init_security(app)&#10;&#10;&#10;@app.route('/sitemap.xml')&#10;def sitemap():&#10;    return send_from_directory('templates', 'sitemap.xml')&#10;&#10;&#10;@app.route('/robots.txt')&#10;def robots_txt():&#10;    return send_from_directory('templates', 'robots.txt')&#10;&#10;&#10;@app.before_request&#10;def redirect_to_main_domain():&#10;    host = request.host.split(':')[0]&#10;&#10;    # Debug vstupních requestů kolem loginu/registrace/indexu&#10;    if request.path in ('/login', '/register', '/'):&#10;        try:&#10;            cookie_name = app.config.get('SESSION_COOKIE_NAME', 'session')&#10;            sid = request.cookies.get(cookie_name)&#10;            print(&#10;                f&quot;[before_request] host={host} path={request.path} method={request.method} session_keys={list(session.keys())} sid={sid}&quot;)&#10;        except Exception:&#10;            pass&#10;&#10;    # Nastav cookie doménu a secure podle hostu&#10;    if host.endswith('knowix.cz'):&#10;        app.config['SESSION_COOKIE_DOMAIN'] = '.knowix.cz'&#10;        app.config['SESSION_COOKIE_SECURE'] = True&#10;        app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'&#10;    elif host in ('localhost', '127.0.0.1'):&#10;        # Lokální vývoj: nepoužívej Secure, žádná doména&#10;        app.config['SESSION_COOKIE_DOMAIN'] = None&#10;        app.config['SESSION_COOKIE_SECURE'] = False&#10;        app.config['SESSION_COOKIE_SAMESITE'] = 'Lax'&#10;&#10;    # Preferovaný host – přesměrování na www&#10;    redirect_hosts = (&quot;knowix.cz&quot;, &quot;knowix.up.railway.app&quot;)&#10;    if host in redirect_hosts:&#10;        target = &quot;https://www.knowix.cz&quot; + request.full_path&#10;        code = 308 if request.method not in (&quot;GET&quot;, &quot;HEAD&quot;, &quot;OPTIONS&quot;) else 301&#10;        return redirect(target, code=code)&#10;&#10;    # Vynucení permanentních session pro přihlášené&#10;    if 'user_id' in session:&#10;        session.permanent = True&#10;        # Force session refresh to ensure cookies are sent&#10;        session.modified = True&#10;&#10;&#10;@app.route('/static/profile_pics/&lt;path:filename&gt;')&#10;def serve_profile_pic(filename):&#10;    &quot;&quot;&quot;Slouží profile obrázky s fallbackem na default obrázek&quot;&quot;&quot;&#10;    try:&#10;        return send_from_directory('static/profile_pics', filename)&#10;    except:&#10;        # Fallback na default avatar pokud obrázek neexistuje&#10;        return send_from_directory('static/pic', 'default_avatar.png')&#10;&#10;&#10;@app.context_processor&#10;def inject_streak():&#10;    user_id = session.get('user_id')&#10;    if user_id:&#10;        streak = get_user_streak(user_id)&#10;        return dict(user_streak=streak)&#10;    return dict(user_streak=0)&#10;&#10;&#10;@app.errorhandler(502)&#10;@app.errorhandler(503)&#10;@app.errorhandler(504)&#10;@app.errorhandler(500)&#10;@app.errorhandler(404)&#10;@app.errorhandler(Exception)&#10;def server_error(e):&#10;    code = getattr(e, 'code', 500)&#10;    tb = traceback.format_exc()&#10;&#10;    # Pokud klient očekává JSON (AJAX fetch na JSON endpoint), vrať JSON místo HTML&#10;    wants_json = ('application/json' in request.headers.get('Accept', '')) or \&#10;                 ('application/json' in request.headers.get('Content-Type', '')) or \&#10;                 request.path.endswith('/check-answer')&#10;    if wants_json:&#10;        return jsonify({&#10;            'error': str(e),&#10;            'code': code,&#10;            'traceback': tb&#10;        }), code&#10;&#10;    return render_template(&#10;        'error.html',&#10;        error_code=code,&#10;        error_message=str(e),&#10;        error_traceback=tb&#10;    ), code&#10;&#10;&#10;LEVEL_NAMES = [&#10;    &quot;Začátečník&quot;, &quot;Učeň&quot;, &quot;Student&quot;, &quot;Pokročilý&quot;, &quot;Expert Knowixu&quot;, &quot;Mistr&quot;, &quot;Legenda&quot;, &quot;Volax&quot;, &quot;Král Knowixu&quot;&#10;]&#10;&#10;&#10;def get_level_name(level):&#10;    if level &lt;= 1:&#10;        return LEVEL_NAMES[0]&#10;    elif level &lt;= 2:&#10;        return LEVEL_NAMES[1]&#10;    elif level &lt;= 4:&#10;        return LEVEL_NAMES[2]&#10;    elif level &lt;= 5:&#10;        return LEVEL_NAMES[3]&#10;    elif level &lt;= 6:&#10;        return LEVEL_NAMES[4]&#10;    elif level &lt;= 8:&#10;        return LEVEL_NAMES[5]&#10;    elif level &lt;= 10:&#10;        return LEVEL_NAMES[6]&#10;    elif level &lt;= 12:&#10;        return LEVEL_NAMES[7]&#10;    elif level &lt;= 15:&#10;        return LEVEL_NAMES[8]&#10;    else:&#10;        return LEVEL_NAMES[-1]&#10;&#10;&#10;@app.context_processor&#10;def inject_xp_info():&#10;    user_id = session.get('user_id')&#10;    if user_id:&#10;        user_data = get_user_xp_and_level(user_id)&#10;        xp = user_data.get(&quot;xp&quot;, 0)&#10;        level = user_data.get(&quot;level&quot;, 1)&#10;        xp_in_level = xp % 50&#10;        percent = int((xp_in_level / 50) * 100)&#10;        level_name = get_level_name(level)&#10;        return dict(&#10;            user_xp=xp,&#10;            user_level=level,&#10;            user_level_name=level_name,&#10;            user_progress_percent=percent,&#10;            user_xp_in_level=xp_in_level&#10;        )&#10;    return {}&#10;&#10;&#10;@app.after_request&#10;def add_security_headers(response):&#10;    # Debug odchozí odpovědi pro login/registraci/index&#10;    if request.path in ('/login', '/register', '/'):&#10;        try:&#10;            cookie_name = app.config.get('SESSION_COOKIE_NAME', 'session')&#10;            has_set_cookie = any(h.lower() == 'set-cookie' for h in response.headers.keys())&#10;            set_cookie_header = response.headers.get('Set-Cookie')&#10;            sid_req = request.cookies.get(cookie_name)&#10;            print(&#10;                f&quot;[after_request] host={request.host} path={request.path} status={response.status_code} set_cookie={has_set_cookie} sid_req={sid_req} cookie_domain={app.config.get('SESSION_COOKIE_DOMAIN')} samesite={app.config.get('SESSION_COOKIE_SAMESITE')} secure={app.config.get('SESSION_COOKIE_SECURE')} set_cookie_header={set_cookie_header[:160] if set_cookie_header else None}&quot;)&#10;        except Exception:&#10;            pass&#10;&#10;    # Vylepšená CSP politika s podporou pro Google Analytics a další služby&#10;    response.headers['Content-Security-Policy'] = (&#10;        &quot;default-src 'self'; &quot;&#10;        &quot;base-uri 'self'; &quot;&#10;        &quot;script-src 'self' 'unsafe-inline' 'unsafe-eval' &quot;&#10;        &quot;https://cdn.quilljs.com https://cdn.jsdelivr.net &quot;&#10;        &quot;https://www.youtube.com https://s.ytimg.com &quot;&#10;        &quot;https://www.googletagmanager.com https://www.google-analytics.com &quot;&#10;        &quot;https://ssl.google-analytics.com; &quot;&#10;        &quot;style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://cdn.quilljs.com; &quot;&#10;        &quot;font-src 'self' https://fonts.gstatic.com; &quot;&#10;        &quot;img-src 'self' data: https: blob: https://www.google-analytics.com https://ssl.google-analytics.com https://www.googletagmanager.com https://stats.g.doubleclick.net; &quot;&#10;        &quot;connect-src 'self' https://www.google-analytics.com https://region1.google-analytics.com https://region1.analytics.google.com https://analytics.google.com https://stats.g.doubleclick.net https://www.googletagmanager.com; &quot;&#10;        &quot;frame-src https://open.spotify.com https://*.spotify.com https://www.youtube-nocookie.com https://www.youtube.com https://*.youtube.com; &quot;&#10;        &quot;object-src 'none'; frame-ancestors 'none'; upgrade-insecure-requests;&quot;&#10;    )&#10;    # Přidána Permissions-Policy&#10;    response.headers['Permissions-Policy'] = (&#10;        &quot;geolocation=(), microphone=(), camera=(), fullscreen=(self), magnetometer=(), gyroscope=(), usb=(), payment=()&quot;&#10;    )&#10;&#10;    # Ensure cookies are properly set for authenticated users&#10;    if 'user_id' in session and request.path in ('/login', '/register'):&#10;        response.set_cookie(&#10;            app.config.get('SESSION_COOKIE_NAME', 'knowix_session'),&#10;            value=session.get('_id', ''),&#10;            domain=app.config.get('SESSION_COOKIE_DOMAIN'),&#10;            secure=app.config.get('SESSION_COOKIE_SECURE', True),&#10;            httponly=app.config.get('SESSION_COOKIE_HTTPONLY', True),&#10;            samesite=app.config.get('SESSION_COOKIE_SAMESITE', 'Lax'),&#10;            max_age=app.config.get('PERMANENT_SESSION_LIFETIME', 60 * 60 * 24 * 30)&#10;        )&#10;&#10;    response.headers['Strict-Transport-Security'] = 'max-age=63072000; includeSubDomains; preload'&#10;    response.headers['X-Frame-Options'] = 'DENY'&#10;    response.headers['Cross-Origin-Opener-Policy'] = 'same-origin'&#10;    response.headers['Cross-Origin-Resource-Policy'] = 'same-origin'&#10;    response.headers['X-Content-Type-Options'] = 'nosniff'&#10;    response.headers['Referrer-Policy'] = 'no-referrer-when-downgrade'&#10;    return response&#10;&#10;&#10;# app.run(debug=True, port=5000 debug=True)&#10;#     from waitress import serve&#10;#&#10;#     serve(app, host=&quot;0.0.0.0&quot;, port=8080)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    from waitress import serve&#10;&#10;    serve(app, host=&quot;0.0.0.0&quot;, port=8080)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/anglictina/app/security_ext.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/anglictina/app/security_ext.py" />
              <option name="updatedContent" value="import os, secrets&#10;from flask import session, request, abort&#10;from flask_limiter import Limiter&#10;from flask_limiter.util import get_remote_address&#10;&#10;# Central Limiter instance&#10;limiter = Limiter(&#10;    get_remote_address,&#10;    storage_uri=os.getenv('REDIS_URL', 'memory://'),&#10;    default_limits=[&quot;300 per hour&quot;, &quot;100 per 15 minutes&quot;],&#10;    headers_enabled=True&#10;)&#10;&#10;CSRF_METHODS = {&quot;POST&quot;, &quot;PUT&quot;, &quot;PATCH&quot;, &quot;DELETE&quot;}&#10;&#10;EXEMPT_ENDPOINTS = set()  # you can add endpoint names here dynamically&#10;&#10;def _ensure_csrf_token():&#10;    token = session.get('_csrf_token')&#10;    if not token:&#10;        token = secrets.token_urlsafe(32)&#10;        session['_csrf_token'] = token&#10;    return token&#10;&#10;def init_security(app):&#10;    limiter.init_app(app)&#10;&#10;    @app.before_request&#10;    def _csrf_protect():&#10;        if request.method in CSRF_METHODS:&#10;            # Skip explicit endpoint exemptions&#10;            if request.endpoint in EXEMPT_ENDPOINTS:&#10;                return&#10;            # Skip static files&#10;            if request.endpoint and request.endpoint.startswith('static'):&#10;                return&#10;            session_token = session.get('_csrf_token')&#10;            sent_token = None&#10;            if request.is_json:&#10;                try:&#10;                    data = request.get_json(silent=True) or {}&#10;                    sent_token = data.get('csrf_token')&#10;                except Exception:&#10;                    sent_token = None&#10;            if sent_token is None:&#10;                sent_token = request.form.get('csrf_token') or request.headers.get('X-CSRFToken')&#10;            if not session_token or not sent_token or session_token != sent_token:&#10;                abort(400)&#10;&#10;    # Make token generator available to Jinja&#10;    app.jinja_env.globals['csrf_token'] = _ensure_csrf_token&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/anglictina/app/templates/student_stats_chart.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/anglictina/app/templates/student_stats_chart.html" />
              <option name="updatedContent" value="{% extends 'base.html' %}&#10;{% block content %}&#10;&lt;div class=&quot;container&quot;&gt;&#10;    &lt;h2&gt;Statistiky studenta: {{ student.first_name }} {{ student.last_name }}&lt;/h2&gt;&#10;    &lt;div class=&quot;profile&quot;&gt;&#10;        &lt;img src=&quot;{{ url_for('static', filename='profile_pics/' + (student.profile_pic or 'default.jpg')) }}&quot; width=&quot;80&quot; height=&quot;80&quot; style=&quot;border-radius:50%&quot;&gt;&#10;        &lt;p&gt;Email: {{ student.email }}&lt;/p&gt;&#10;        &lt;p&gt;Úroveň: {{ student.english_level }}&lt;/p&gt;&#10;        &lt;p&gt;XP: {{ student.xp }}&lt;/p&gt;&#10;        &lt;p&gt;Level: {{ student.level }}&lt;/p&gt;&#10;        &lt;p&gt;Streak: {{ student.streak }}&lt;/p&gt;&#10;    &lt;/div&gt;&#10;    &lt;hr&gt;&#10;    &lt;h3&gt;Přehled statistik&lt;/h3&gt;&#10;    &lt;canvas id=&quot;statsChart&quot; width=&quot;400&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt;&#10;&lt;/div&gt;&#10;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/chart.js&quot;&gt;&lt;/script&gt;&#10;&lt;script&gt;&#10;    // Připrav data z user_stats&#10;    const stats = {{ stats|tojson }};&#10;    // Předpokládáme, že user_stats má sloupce: id, user_id, stat_name, stat_value&#10;    const labels = stats.map(s =&gt; s.stat_name);&#10;    const values = stats.map(s =&gt; s.stat_value);&#10;    const ctx = document.getElementById('statsChart').getContext('2d');&#10;    new Chart(ctx, {&#10;        type: 'bar',&#10;        data: {&#10;            labels: labels,&#10;            datasets: [{&#10;                label: 'Hodnota',&#10;                data: values,&#10;                backgroundColor: 'rgba(54, 162, 235, 0.5)',&#10;                borderColor: 'rgba(54, 162, 235, 1)',&#10;                borderWidth: 1&#10;            }]&#10;        },&#10;        options: {&#10;            responsive: true,&#10;            scales: {&#10;                y: {&#10;                    beginAtZero: true&#10;                }&#10;            }&#10;        }&#10;    });&#10;&lt;/script&gt;&#10;{% endblock %}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>