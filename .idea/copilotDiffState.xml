<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/anglictina/app/obchod.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/anglictina/app/obchod.py" />
              <option name="originalContent" value="from datetime import date, timedelta&#10;from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify, session&#10;from db import get_db_connection&#10;&#10;FREEZE_COST = 50  # XP cena za freeze&#10;XP_BOOSTER_COST = 100  # XP cena za booster&#10;XP_BOOSTER_DURATION_DAYS = 1  # Booster trvá 1 den&#10;FREEZE_MAX_COUNT = 3  # Maximální počet freeze&#10;&#10;obchod_bp = Blueprint('obchod', __name__, template_folder='templates')&#10;&#10;&#10;@obchod_bp.route('/obchod', methods=['GET', 'POST'])&#10;def obchod():&#10;    user_id = session.get(&quot;user_id&quot;)&#10;    if not user_id:&#10;        flash(&quot;Nejste přihlášeni.&quot;, &quot;danger&quot;)&#10;        return redirect(url_for(&quot;auth.login&quot;))  # nebo jiná vaše login route&#10;&#10;    status = get_user_shop_status(user_id)&#10;    message = None&#10;    message_type = &quot;success&quot;&#10;&#10;    if request.method == &quot;POST&quot;:&#10;        item = request.form.get(&quot;item&quot;)&#10;        if item == &quot;freeze&quot;:&#10;            result = buy_freeze(user_id)&#10;        elif item == &quot;xp_booster&quot;:&#10;            result = buy_xp_booster(user_id)&#10;        else:&#10;            result = {&quot;error&quot;: &quot;Neplatná položka&quot;}&#10;&#10;        if &quot;error&quot; in result:&#10;            message = result[&quot;error&quot;]&#10;            message_type = &quot;danger&quot;&#10;        else:&#10;            message = result.get(&quot;message&quot;, &quot;Nákup proběhl úspěšně.&quot;)&#10;        # Po nákupu znovu načteme stav&#10;        status = get_user_shop_status(user_id)&#10;&#10;    return render_template(&#10;        &quot;obchod.html&quot;,&#10;        shop_status=status,&#10;        message=message,&#10;        message_type=message_type,&#10;        FREEZE_COST=FREEZE_COST,&#10;        XP_BOOSTER_COST=XP_BOOSTER_COST&#10;    )&#10;&#10;&#10;def get_user_shop_status(user_id):&#10;    conn = get_db_connection()&#10;    cur = conn.cursor(dictionary=True)&#10;    cur.execute(&quot;SELECT xp, level FROM users WHERE id = %s&quot;, (user_id,))&#10;    user = cur.fetchone()&#10;    if not user:&#10;        cur.close()&#10;        conn.close()&#10;        return {&quot;error&quot;: &quot;User not found&quot;}&#10;&#10;    cur.execute(&#10;        &quot;SELECT COUNT(*) AS freeze_count FROM user_freeze WHERE user_id = %s AND used = FALSE AND freeze_date &gt;= %s&quot;,&#10;        (user_id, date.today())&#10;    )&#10;    freeze_count = cur.fetchone()[&quot;freeze_count&quot;]&#10;&#10;    cur.execute(&#10;        &quot;SELECT COUNT(*) AS booster_active FROM user_xp_booster WHERE user_id = %s AND active = TRUE AND start_date &lt;= %s AND end_date &gt;= %s&quot;,&#10;        (user_id, date.today(), date.today())&#10;    )&#10;    booster_active = cur.fetchone()[&quot;booster_active&quot;] &gt; 0&#10;&#10;    cur.close()&#10;    conn.close()&#10;    return {&#10;        &quot;xp&quot;: user[&quot;xp&quot;],&#10;        &quot;level&quot;: user[&quot;level&quot;],&#10;        &quot;freeze_count&quot;: freeze_count,&#10;        &quot;xp_booster_active&quot;: booster_active&#10;    }&#10;&#10;&#10;def buy_freeze(user_id):&#10;    conn = get_db_connection()&#10;    cur = conn.cursor(dictionary=True)&#10;    cur.execute(&quot;SELECT xp, level FROM users WHERE id = %s&quot;, (user_id,))&#10;    user = cur.fetchone()&#10;    if not user:&#10;        cur.close()&#10;        conn.close()&#10;        return {&quot;error&quot;: &quot;Uživatel nenalezen&quot;}&#10;&#10;    # Zjisti počet nevyužitých freeze&#10;    cur.execute(&#10;        &quot;SELECT COUNT(*) AS freeze_count FROM user_freeze WHERE user_id = %s AND used = FALSE AND freeze_date &gt;= %s&quot;,&#10;        (user_id, date.today())&#10;    )&#10;    freeze_count = cur.fetchone()[&quot;freeze_count&quot;]&#10;    if freeze_count &gt;= FREEZE_MAX_COUNT:&#10;        cur.close()&#10;        conn.close()&#10;        return {&quot;error&quot;: f&quot;Nelze koupit více než {FREEZE_MAX_COUNT} freeze. Nejprve nějaký použij.&quot;}&#10;&#10;    if user[&quot;xp&quot;] &lt; FREEZE_COST:&#10;        cur.close()&#10;        conn.close()&#10;        return {&quot;error&quot;: &quot;Nedostatek XP&quot;}&#10;&#10;    new_level = user[&quot;level&quot;] - 1 if user[&quot;level&quot;] &gt; 1 else 1&#10;&#10;    cur2 = conn.cursor()&#10;    cur2.execute(&quot;UPDATE users SET xp = xp - %s, level = %s WHERE id = %s&quot;, (FREEZE_COST, new_level, user_id))&#10;    cur2.execute(&#10;        &quot;INSERT INTO user_freeze (user_id, freeze_date, used) VALUES (%s, %s, FALSE)&quot;,&#10;        (user_id, date.today())&#10;    )&#10;    conn.commit()&#10;    cur2.close()&#10;    cur.close()&#10;    conn.close()&#10;    return {&quot;success&quot;: True, &quot;message&quot;: &quot;Freeze aktivován na dnešní den. (Level -1)&quot;}&#10;&#10;&#10;def buy_xp_booster(user_id):&#10;    conn = get_db_connection()&#10;    cur = conn.cursor(dictionary=True)&#10;    cur.execute(&quot;SELECT xp, level FROM users WHERE id = %s&quot;, (user_id,))&#10;    user = cur.fetchone()&#10;    if not user or user[&quot;xp&quot;] &lt; XP_BOOSTER_COST:&#10;        cur.close()&#10;        conn.close()&#10;        return {&quot;error&quot;: &quot;Nedostatek XP&quot;}&#10;&#10;    today = date.today()&#10;    end_date = today + timedelta(days=XP_BOOSTER_DURATION_DAYS - 1)&#10;    new_level = user[&quot;level&quot;] - 1 if user[&quot;level&quot;] &gt; 1 else 1&#10;&#10;    cur2 = conn.cursor()&#10;    cur2.execute(&quot;UPDATE users SET xp = xp - %s, level = %s WHERE id = %s&quot;, (XP_BOOSTER_COST, new_level, user_id))&#10;    cur2.execute(&#10;        &quot;INSERT INTO user_xp_booster (user_id, start_date, end_date, active) VALUES (%s, %s, %s, TRUE)&quot;,&#10;        (user_id, today, end_date)&#10;    )&#10;    conn.commit()&#10;    cur2.close()&#10;    cur.close()&#10;    conn.close()&#10;    return {&quot;success&quot;: True, &quot;message&quot;: f&quot;XP Booster aktivován do {end_date}. (Level -1)&quot;}&#10;" />
              <option name="updatedContent" value="from datetime import date, timedelta&#13;&#10;from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify, session&#13;&#10;from db import get_db_connection&#13;&#10;from xp import get_user_xp_and_level&#13;&#10;&#13;&#10;FREEZE_COST = 50  # XP cena za freeze&#13;&#10;XP_BOOSTER_COST = 100  # XP cena za booster&#13;&#10;XP_BOOSTER_DURATION_DAYS = 1  # Booster trvá 1 den&#13;&#10;FREEZE_MAX_COUNT = 3  # Maximální počet freeze&#13;&#10;&#13;&#10;obchod_bp = Blueprint('obchod', __name__, template_folder='templates')&#13;&#10;&#13;&#10;LEVEL_NAMES = [&#13;&#10;    &quot;Začátečník&quot;, &quot;Učeň&quot;, &quot;Student&quot;, &quot;Pokročilý&quot;, &quot;Expert&quot;, &quot;Mistr&quot;, &quot;Legenda&quot;&#13;&#10;]&#13;&#10;&#13;&#10;&#13;&#10;def get_level_name(level):&#13;&#10;    if level &lt;= 1:&#13;&#10;        return LEVEL_NAMES[0]&#13;&#10;    elif level &lt;= 2:&#13;&#10;        return LEVEL_NAMES[1]&#13;&#10;    elif level &lt;= 4:&#13;&#10;        return LEVEL_NAMES[2]&#13;&#10;    elif level &lt;= 6:&#13;&#10;        return LEVEL_NAMES[3]&#13;&#10;    elif level &lt;= 8:&#13;&#10;        return LEVEL_NAMES[4]&#13;&#10;    elif level &lt;= 10:&#13;&#10;        return LEVEL_NAMES[5]&#13;&#10;    else:&#13;&#10;        return LEVEL_NAMES[6]&#13;&#10;&#13;&#10;&#13;&#10;@obchod_bp.context_processor&#13;&#10;def inject_xp_info():&#13;&#10;    user_id = session.get('user_id')&#13;&#10;    if user_id:&#13;&#10;        user_data = get_user_xp_and_level(user_id)&#13;&#10;        xp = user_data.get(&quot;xp&quot;, 0)&#13;&#10;        level = user_data.get(&quot;level&quot;, 1)&#13;&#10;        xp_in_level = xp % 50&#13;&#10;        percent = int((xp_in_level / 50) * 100)&#13;&#10;        level_name = get_level_name(level)&#13;&#10;        return dict(&#13;&#10;            user_xp=xp,&#13;&#10;            user_level=level,&#13;&#10;            user_level_name=level_name,&#13;&#10;            user_progress_percent=percent,&#13;&#10;            user_xp_in_level=xp_in_level&#13;&#10;        )&#13;&#10;    return {}&#13;&#10;&#13;&#10;&#13;&#10;@obchod_bp.route('/obchod')&#13;&#10;def obchod():&#13;&#10;    user_id = session.get(&quot;user_id&quot;)&#13;&#10;    if not user_id:&#13;&#10;        flash(&quot;Nejste přihlášeni.&quot;, &quot;danger&quot;)&#13;&#10;        return redirect(url_for(&quot;auth.login&quot;))&#13;&#10;&#13;&#10;    status = get_user_shop_status(user_id)&#13;&#10;&#13;&#10;    return render_template(&#13;&#10;        &quot;obchod.html&quot;,&#13;&#10;        shop_status=status,&#13;&#10;        FREEZE_COST=FREEZE_COST,&#13;&#10;        XP_BOOSTER_COST=XP_BOOSTER_COST&#13;&#10;    )&#13;&#10;&#13;&#10;&#13;&#10;@obchod_bp.route('/buy_item', methods=['POST'])&#13;&#10;def buy_item():&#13;&#10;    &quot;&quot;&quot;Route pro nákup položek - s CSRF ochranou&quot;&quot;&quot;&#13;&#10;    user_id = session.get(&quot;user_id&quot;)&#13;&#10;    if not user_id:&#13;&#10;        return jsonify({'status': 'error', 'message': 'Nejste přihlášeni'}), 401&#13;&#10;&#13;&#10;    try:&#13;&#10;        data = request.get_json()&#13;&#10;        item = data.get('item', '').strip()&#13;&#10;&#13;&#10;        if item == &quot;freeze&quot;:&#13;&#10;            result = buy_freeze(user_id)&#13;&#10;        elif item == &quot;xp_booster&quot;:&#13;&#10;            result = buy_xp_booster(user_id)&#13;&#10;        else:&#13;&#10;            return jsonify({'status': 'error', 'message': 'Neplatná položka'}), 400&#13;&#10;&#13;&#10;        if &quot;error&quot; in result:&#13;&#10;            return jsonify({'status': 'error', 'message': result[&quot;error&quot;]}), 400&#13;&#10;        else:&#13;&#10;            return jsonify({'status': 'success', 'message': result.get(&quot;message&quot;, &quot;Nákup proběhl úspěšně.&quot;)})&#13;&#10;&#13;&#10;    except Exception as e:&#13;&#10;        print(&quot;Chyba v buy_item route:&quot;, str(e))&#13;&#10;        return jsonify({'status': 'error', 'message': 'Nastala chyba při zpracování požadavku'}), 500&#13;&#10;&#13;&#10;&#13;&#10;def get_user_shop_status(user_id):&#13;&#10;    conn = get_db_connection()&#13;&#10;    cur = conn.cursor(dictionary=True)&#13;&#10;    cur.execute(&quot;SELECT xp, level FROM users WHERE id = %s&quot;, (user_id,))&#13;&#10;    user = cur.fetchone()&#13;&#10;    if not user:&#13;&#10;        cur.close()&#13;&#10;        conn.close()&#13;&#10;        return {&quot;error&quot;: &quot;User not found&quot;}&#13;&#10;&#13;&#10;    cur.execute(&#13;&#10;        &quot;SELECT COUNT(*) AS freeze_count FROM user_freeze WHERE user_id = %s AND used = FALSE AND freeze_date &gt;= %s&quot;,&#13;&#10;        (user_id, date.today())&#13;&#10;    )&#13;&#10;    freeze_count = cur.fetchone()[&quot;freeze_count&quot;]&#13;&#10;&#13;&#10;    cur.execute(&#13;&#10;        &quot;SELECT COUNT(*) AS booster_active FROM user_xp_booster WHERE user_id = %s AND active = TRUE AND start_date &lt;= %s AND end_date &gt;= %s&quot;,&#13;&#10;        (user_id, date.today(), date.today())&#13;&#10;    )&#13;&#10;    booster_active = cur.fetchone()[&quot;booster_active&quot;] &gt; 0&#13;&#10;&#13;&#10;    cur.close()&#13;&#10;    conn.close()&#13;&#10;    return {&#13;&#10;        &quot;xp&quot;: user[&quot;xp&quot;],&#13;&#10;        &quot;level&quot;: user[&quot;level&quot;],&#13;&#10;        &quot;freeze_count&quot;: freeze_count,&#13;&#10;        &quot;xp_booster_active&quot;: booster_active&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;def buy_freeze(user_id):&#13;&#10;    conn = get_db_connection()&#13;&#10;    cur = conn.cursor(dictionary=True)&#13;&#10;    cur.execute(&quot;SELECT xp, level FROM users WHERE id = %s&quot;, (user_id,))&#13;&#10;    user = cur.fetchone()&#13;&#10;    if not user:&#13;&#10;        cur.close()&#13;&#10;        conn.close()&#13;&#10;        return {&quot;error&quot;: &quot;Uživatel nenalezen&quot;}&#13;&#10;&#13;&#10;    # Zjisti počet nevyužitých freeze&#13;&#10;    cur.execute(&#13;&#10;        &quot;SELECT COUNT(*) AS freeze_count FROM user_freeze WHERE user_id = %s AND used = FALSE AND freeze_date &gt;= %s&quot;,&#13;&#10;        (user_id, date.today())&#13;&#10;    )&#13;&#10;    freeze_count = cur.fetchone()[&quot;freeze_count&quot;]&#13;&#10;    if freeze_count &gt;= FREEZE_MAX_COUNT:&#13;&#10;        cur.close()&#13;&#10;        conn.close()&#13;&#10;        return {&quot;error&quot;: f&quot;Nelze koupit více než {FREEZE_MAX_COUNT} freeze. Nejprve nějaký použij.&quot;}&#13;&#10;&#13;&#10;    if user[&quot;xp&quot;] &lt; FREEZE_COST:&#13;&#10;        cur.close()&#13;&#10;        conn.close()&#13;&#10;        return {&quot;error&quot;: &quot;Nedostatek XP&quot;}&#13;&#10;&#13;&#10;    new_level = user[&quot;level&quot;] - 1 if user[&quot;level&quot;] &gt; 1 else 1&#13;&#10;&#13;&#10;    cur2 = conn.cursor()&#13;&#10;    cur2.execute(&quot;UPDATE users SET xp = xp - %s, level = %s WHERE id = %s&quot;, (FREEZE_COST, new_level, user_id))&#13;&#10;    cur2.execute(&#13;&#10;        &quot;INSERT INTO user_freeze (user_id, freeze_date, used) VALUES (%s, %s, FALSE)&quot;,&#13;&#10;        (user_id, date.today())&#13;&#10;    )&#13;&#10;    conn.commit()&#13;&#10;    cur2.close()&#13;&#10;    cur.close()&#13;&#10;    conn.close()&#13;&#10;    return {&quot;success&quot;: True, &quot;message&quot;: &quot;Freeze aktivován na dnešní den. (Level -1)&quot;}&#13;&#10;&#13;&#10;&#13;&#10;def buy_xp_booster(user_id):&#13;&#10;    conn = get_db_connection()&#13;&#10;    cur = conn.cursor(dictionary=True)&#13;&#10;    cur.execute(&quot;SELECT xp, level FROM users WHERE id = %s&quot;, (user_id,))&#13;&#10;    user = cur.fetchone()&#13;&#10;    if not user or user[&quot;xp&quot;] &lt; XP_BOOSTER_COST:&#13;&#10;        cur.close()&#13;&#10;        conn.close()&#13;&#10;        return {&quot;error&quot;: &quot;Nedostatek XP&quot;}&#13;&#10;&#13;&#10;    today = date.today()&#13;&#10;    end_date = today + timedelta(days=XP_BOOSTER_DURATION_DAYS - 1)&#13;&#10;    new_level = user[&quot;level&quot;] - 1 if user[&quot;level&quot;] &gt; 1 else 1&#13;&#10;&#13;&#10;    cur2 = conn.cursor()&#13;&#10;    cur2.execute(&quot;UPDATE users SET xp = xp - %s, level = %s WHERE id = %s&quot;, (XP_BOOSTER_COST, new_level, user_id))&#13;&#10;    cur2.execute(&#13;&#10;        &quot;INSERT INTO user_xp_booster (user_id, start_date, end_date, active) VALUES (%s, %s, %s, TRUE)&quot;,&#13;&#10;        (user_id, today, end_date)&#13;&#10;    )&#13;&#10;    conn.commit()&#13;&#10;    cur2.close()&#13;&#10;    cur.close()&#13;&#10;    conn.close()&#13;&#10;    return {&quot;success&quot;: True, &quot;message&quot;: f&quot;XP Booster aktivován do {end_date}. (Level -1)&quot;}&#13;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/anglictina/app/templates/student_stats_chart.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/anglictina/app/templates/student_stats_chart.html" />
              <option name="updatedContent" value="{% extends 'base.html' %}&#10;{% block content %}&#10;&lt;div class=&quot;container&quot;&gt;&#10;    &lt;h2&gt;Statistiky studenta: {{ student.first_name }} {{ student.last_name }}&lt;/h2&gt;&#10;    &lt;div class=&quot;profile&quot;&gt;&#10;        &lt;img src=&quot;{{ url_for('static', filename='profile_pics/' + (student.profile_pic or 'default.jpg')) }}&quot; width=&quot;80&quot; height=&quot;80&quot; style=&quot;border-radius:50%&quot;&gt;&#10;        &lt;p&gt;Email: {{ student.email }}&lt;/p&gt;&#10;        &lt;p&gt;Úroveň: {{ student.english_level }}&lt;/p&gt;&#10;        &lt;p&gt;XP: {{ student.xp }}&lt;/p&gt;&#10;        &lt;p&gt;Level: {{ student.level }}&lt;/p&gt;&#10;        &lt;p&gt;Streak: {{ student.streak }}&lt;/p&gt;&#10;    &lt;/div&gt;&#10;    &lt;hr&gt;&#10;    &lt;h3&gt;Přehled statistik&lt;/h3&gt;&#10;    &lt;canvas id=&quot;statsChart&quot; width=&quot;400&quot; height=&quot;200&quot;&gt;&lt;/canvas&gt;&#10;&lt;/div&gt;&#10;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/chart.js&quot;&gt;&lt;/script&gt;&#10;&lt;script&gt;&#10;    // Připrav data z user_stats&#10;    const stats = {{ stats|tojson }};&#10;    // Předpokládáme, že user_stats má sloupce: id, user_id, stat_name, stat_value&#10;    const labels = stats.map(s =&gt; s.stat_name);&#10;    const values = stats.map(s =&gt; s.stat_value);&#10;    const ctx = document.getElementById('statsChart').getContext('2d');&#10;    new Chart(ctx, {&#10;        type: 'bar',&#10;        data: {&#10;            labels: labels,&#10;            datasets: [{&#10;                label: 'Hodnota',&#10;                data: values,&#10;                backgroundColor: 'rgba(54, 162, 235, 0.5)',&#10;                borderColor: 'rgba(54, 162, 235, 1)',&#10;                borderWidth: 1&#10;            }]&#10;        },&#10;        options: {&#10;            responsive: true,&#10;            scales: {&#10;                y: {&#10;                    beginAtZero: true&#10;                }&#10;            }&#10;        }&#10;    });&#10;&lt;/script&gt;&#10;{% endblock %}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>